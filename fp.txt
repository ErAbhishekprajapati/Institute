This is Laravel forget password implementation ;
..

 I'll walk you through the entire process to ensure the "Forgot Password" and "Reset Password" functionality works correctly in your Laravel application.

Hereâ€™s the final code, including the AdminController, the route definitions, the ResetPasswordEmail mailable, and necessary updates to the view files.

1. Routes Definition (in routes/web.php)
Make sure you have the routes set up for the forgot password and reset password actions. We'll add routes for showing the form, processing the password reset, and handling the reset link.

php

use App\Http\Controllers\AdminController;

// Show the forgot password form
Route::get('forget-password', [AdminController::class, 'ShowForgotPasswordForm'])->name('forgetpassword');

// Process the forgot password form
Route::post('process-forget-password', [AdminController::class, 'processForgetPassword'])->name('processforgetpassword');

// Show the reset password form (requires token)
Route::get('reset-password/{token}', [AdminController::class, 'ResetForm'])->name('resetpassword');

// Reset the password (handle form submission)
Route::post('reset-password', [AdminController::class, 'processResetPassword'])->name('processresetpassword');
2. AdminController (in app/Http/Controllers/AdminController.php)
Here is the updated AdminController with both the forgot password and reset password functionality.

php
Copy
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use App\Mail\ResetPasswordEmail;  // Mailable for reset password email

class AdminController extends Controller
{
    public function index()
    {
        return view('Dashboard.index');
    }

    public function logout()
    {
        Auth::logout();
        return redirect()->route('login')->with('message', 'You have successfully logged out.');
    }

    public function ShowForgotPasswordForm()
    {
        return view('forgetpassword');
    }

    public function ResetForm($token)
    {
        // Check if token is valid
        $tokenRecord = DB::table('password_reset_tokens')->where('token', $token)->first();
        
        if (!$tokenRecord) {
            return redirect()->route('login')->withErrors(['message' => 'Invalid or expired token.']);
        }

        return view('resetpassword', ['token' => $token]);
    }

    public function processForgetPassword(Request $request)
    {
        // Validate the email
        $validator = Validator::make($request->all(), [
            'email' => 'required|email|exists:users,email',
        ]);

        if ($validator->fails()) {
            return redirect()->route('forgetpassword')->withInput()->withErrors($validator);
        }

        // Delete any existing tokens for this email
        DB::table('password_reset_tokens')->where('email', $request->email)->delete();

        // Generate new token
        $token = Str::random(60);

        // Insert new token into the password_reset_tokens table
        DB::table('password_reset_tokens')->insert([
            'email' => $request->email,
            'token' => $token,
            'created_at' => now(),
        ]);

        // Get user by email
        $user = User::where('email', $request->email)->first();

        // Prepare data to send to the mailable
        $mailData = [
            'token' => $token,
            'user' => $user,
            'subject' => 'You have requested to change your password',
        ];

        // Send the reset password email
        Mail::to($request->email)->send(new ResetPasswordEmail($mailData));

        // Redirect to the forgot password page with a success message
        return redirect()->route('forgetpassword')->with('success', 'Please check your email for the password reset link.');
    }

    public function processResetPassword(Request $request)
    {
        // Validate the reset password form
        $validator = Validator::make($request->all(), [
            'password' => 'required|confirmed|min:8',
        ]);

        if ($validator->fails()) {
            return redirect()->route('resetpassword', ['token' => $request->token])
                ->withInput()->withErrors($validator);
        }

        // Check if the token is valid
        $tokenRecord = DB::table('password_reset_tokens')->where('token', $request->token)->first();

        if (!$tokenRecord) {
            return redirect()->route('login')->withErrors(['message' => 'Invalid or expired token.']);
        }

        // Get the user
        $user = User::where('email', $tokenRecord->email)->first();

        if ($user) {
            // Update the user's password
            $user->password = bcrypt($request->password);
            $user->save();

            // Delete the reset token
            DB::table('password_reset_tokens')->where('token', $request->token)->delete();

            return redirect()->route('login')->with('success', 'Your password has been reset successfully.');
        }

        return redirect()->route('login')->withErrors(['message' => 'User not found.']);
    }
}
3. ResetPasswordEmail Mailable (in app/Mail/ResetPasswordEmail.php)
This mailable will send the password reset email containing the link with the token.

php
Copy
<?php

namespace App\Mail;

use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

class ResetPasswordEmail extends Mailable
{
    use SerializesModels;

    public $mailData;

    public function __construct($mailData)
    {
        $this->mailData = $mailData;
    }

    public function build()
    {
        return $this->view('emails.resetpassword')  // Make sure you have this view
                    ->subject($this->mailData['subject'])
                    ->with([
                        'token' => $this->mailData['token'], // Pass token
                        'user' => $this->mailData['user'],
                        'resetUrl' => route('resetpassword', ['token' => $this->mailData['token']]), // Generate reset URL
                    ]);
    }
}
4. Reset Password Email View (in resources/views/emails/resetpassword.blade.php)
This is the email template that will be sent to the user with the reset link.

blade
Copy
<p>Hello {{ $user->name }},</p>

<p>You have requested to reset your password. Please click the link below to reset it:</p>

<a href="{{ $resetUrl }}">Reset Password</a>

<p>If you did not request a password reset, please ignore this email.</p>
5. Forgot Password Form (in resources/views/forgetpassword.blade.php)
This is the form where the user enters their email to receive the password reset link.

blade
Copy
<form action="{{ route('processforgetpassword') }}" method="POST">
    @csrf
    <div>
        <label for="email">Enter your email address</label>
        <input type="email" name="email" id="email" required>
        @error('email') <span>{{ $message }}</span> @enderror
    </div>
    <button type="submit">Send Password Reset Link</button>
</form>

@if (session('success'))
    <p>{{ session('success') }}</p>
@endif
6. Reset Password Form (in resources/views/resetpassword.blade.php)
This is the form where the user can reset their password using the token.

blade
Copy
<form action="{{ route('processresetpassword') }}" method="POST">
    @csrf
    <input type="hidden" name="token" value="{{ $token }}">
    
    <div>
        <label for="password">New Password</label>
        <input type="password" name="password" id="password" required>
    </div>

    <div>
        <label for="password_confirmation">Confirm Password</label>
        <input type="password" name="password_confirmation" id="password_confirmation" required>
    </div>

    <button type="submit">Reset Password</button>
    
    @error('password') <span>{{ $message }}</span> @enderror
</form>
Conclusion:
AdminController handles the forgot password and reset password logic.
Mailable (ResetPasswordEmail) sends the email with a reset link containing the token.
Views handle the forms for the user to input their email and reset their password.